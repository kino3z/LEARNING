我研究了一会扫描线的常见维护问题，再脑洞大开了一下就有了如下结果。
一般情况如下，有n个k维向量(a1,a2,a3,a4...)，向量i大于向量j定义为（aki>akj）（1<=k<=n）;
若向量a>向量b，则（a,b）被定义为一个“组合”，问有多少个组合？（这个组合的个数支持减法、加法）
这种问题的学名叫k维偏序
一维情况：
	排个序即可；离线+离散化后的值域线段树也是可以的。平摊单词logn
二维情况：
	如常见逆序对。做法如下：
	一个维度作为时间维度，一个维度是值。即按照某值排序后的顺序，另一值插入。例如：
		（1）用Treap,splay
		（2）值域线段树、树状数组
		 平摊单词logn
	两个维度都是值，即形成一个平面，每次询问一个平面中的点数。例如：
		（1）采用平面四分树、KD-Tree 单次查询log^2n
		（2）一维K大 单次查询logn
		 (3)离散化后+二维数组利器 树状数组 空间n^3 时间小常数log^2n
		（4）二维虚线段树 log^2n
三维情况：
	也就是动态逆序对。做法如下：
	一个时间+两个空间：
		（1）树状数组套主席树/线段树套主席树。单次logn^2
		（2）平面四分树 单次 logn^2
		（3）分治，按照某一维排序后分治，合并时不用考虑已排好的一维，成功化为二维问题，左侧为插入右侧为询问。
		     这样就可以采用二维问题的一般解决方案，扫描线（有递归了）。单次平均nlog^2n,空间nlogn
		（4）二维虚线段树
	三个空间：
		（1）八分树/三维花式划分二叉树 logn^3
		 (2)三维树状数组 空间n^3(吓死我了，好在不用初始化) 单次特快log^3n
		 (3)三维虚线段树 （这个不错，空间又小，又快）
	
四维情况：
	1+3：
		（1）八分树/三维花式划分二叉树.... logn^3
		 (2) 主席树要怎么支持平面？go die
	4：
		（1）16分？/四维花式划分二叉树
	分治
k维：
	1+k-1	（1）k-1维花式划分二叉树.....
	k：	（2）k维花式划分二叉树
		（5）k维树状数组，用hash只保存有值的地方
		（3）分治
		（4）k维虚线段树 单次修改log^kn
注： 上述采用多维树一类的方法需要按照虚树建立，否则建立会是n^k-1
总结一下，扫描线说白了就是K维超空间的一个超平面，只是超平面会顺着某个轴移动而已。其他点就按照被扫过的
顺序依次被插入平面中。即变为一个时间轴和一个K-1维超平面。所以动态xxx和比xxx难不少，因为多了一个维度。
当然考试由于测评时间有限，所以最多三到四个维度。显然动态的时间复杂度会和静态是在一个等级，所以宁可把一个
维度转为时间来做。
我知道k维偏序怎么出了，复杂度中logn的n是值域范围，如果把每一维的取值范围缩小（20~30）这样就可以出超高维偏序了。
这时最优解法就该是高维树状数组了，记着优化寻址速度


以上询问为某一范围中的点的个数的询问，那么点权和的询问呢？
一维 线段树、bit、Treap、splay   logn
二维 二维空间划分树一类 logn^2  
	利用扫描线(前提可以离线) logn  等价于扫描线上的区间和。
	树状数组
	分治？貌似可以，我不会
三维 扫描面
k维。。。

最值询问又怎样？
一维：。。。。
二维 二维空间划分树一类 logn^2  
	扫描线？貌似不行，不支持减法
	莫队貌似表示下来是四维的。。。
	暴力？单次 n
	


好像还有上升子序列可以高维推广
给出n个点(x,y,z)，请找出最长上升子列(即满足i<j,xi<=xj&&yi<=yj&&zi<=zj)，若存在多组，请输出字典序最小的解
实质为k维空间中的前缀空间取max，所以答案具有单调性
一维： 没有意义，即元素个数
二维:nlogn:(1）标算：动归+二分
	（2）值域线段树单点插入区间最值
	（3）扫描线+一维树状数组维护最值
	（4）扫描线+平衡树
	nlog^2n:
	（1）分治单边树状数组维护	
	（2）二维树状数组拆前缀好像也是可以的（空间坑）
三维：nlog^2n:扫描面：树状数组套主席树/treap
	（3）其他方法见三维的逆序对



wait a moment!!!!!
五维偏序出现在了2015北京ACM，而且还没有小数据范围，1s 50000+50000
别人用分块+bitset过了，如果bitset效率算O(1)的话就是查询sqrt(n),建立O(n)
如果算O(n)的话就黑了，但确实跑过去了，bitset效率到底是多少？
重新计算后，bitset应该如下，单次查询复杂度最大在bitset，O（n/32）,如果
系统是64位就更优越了。

贴：
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <vector>
#include <bitset>
#define inf 1000000007
#define maxn 52000
#define maxm 520

using namespace std;

struct score
{
    int x,y;
    friend bool operator <(score a, score b)
    {
        return a.x<b.x;
    }
}s[6][maxn];

int n,m,p,num,block;
int bel[maxn],l[maxm],r[maxm];
int a[6][maxn];
bitset<50005> b[6][maxm];
bitset<50005> now[6];

int main()
{
    int Case;
    scanf("%d",&Case);
    for (int i=1;i<=5;i++) b[i][0].reset();
    for (int o=1;o<=Case;o++)
    {
        scanf("%d%d",&n,&m);
        for (int j=1;j<=n;j++)
            for (int i=1;i<=5;i++)    
            {
                scanf("%d",&a[i][j]);
                s[i][j].x=a[i][j];
                s[i][j].y=j;
            }
        for (int i=1;i<=5;i++)
        {
            sort(s[i]+1,s[i]+n+1);
            sort(a[i]+1,a[i]+n+1);
        }
        int block=sqrt(n);
        int num=n/block+(n%block!=0);
        for (int i=1;i<=n;i++) bel[i]=(i-1)/block+1;
        for (int i=1;i<=num;i++) l[i]=(i-1)*block+1;
        for (int i=1;i<=num;i++) r[i]=i*block;
        r[num]=n;
        for (int i=1;i<=5;i++)
            for (int j=1;j<=num;j++)
            {
                b[i][j]=b[i][j-1];
                for (int k=l[j];k<=r[j];k++)
                    b[i][j][s[i][k].y]=1;
            }
        scanf("%d",&p);
        int x[6],ans=0;
        for (int q=1;q<=p;q++)
        {
            for (int i=1;i<=5;i++) scanf("%d",&x[i]);
            for (int i=1;i<=5;i++) x[i]^=ans;
            for (int i=1;i<=5;i++) now[i].reset();
            for (int i=1;i<=5;i++)
            {
                int tmp=upper_bound(a[i]+1,a[i]+n+1,x[i])-a[i]-1;
                if (tmp==0) continue;
                now[i]=b[i][bel[tmp]-1];
                for (int j=l[bel[tmp]];j<=tmp;j++)
                    now[i][s[i][j].y]=1;
            }
            now[0]=now[1]&now[2]&now[3]&now[4]&now[5];
            ans=now[0].count();
            printf("%d\n",ans);
        }
    }
    return 0;
}

Score


想想好像是，bitsetN^2能跑50000



